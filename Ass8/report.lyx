#LyX file created by tex2lyx 2.1
\lyxformat 474
\begin_document
\begin_header
\textclass article
\begin_preamble
\title{Assignment 8}
\author{
        Avijit Ghosh \\
        14CH3FP18\\
}
\date{\today}

\usepackage{times}




\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package none
\inputencoding utf8
\fontencoding default
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 0
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
maketitle
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
Event-driven Simulation of random particle collisions using heaps. 
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
This program simulates the collision of balls on a 2D planar region bounded by straight walls using a Heap Data Structure.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Section
Event Driven Simulation
\end_layout

\begin_layout Standard
We need to devise the most efficient use of the Heap data structure to simulate the collision of particles using Event driven simulation. 
\begin_inset Newline newline
\end_inset

 Event driven simulation allows us to simulate events in a chronological order.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Section
Implementation
\end_layout

\begin_layout Standard

\begin_inset CommandInset label
LatexCommand label
name "Implementation"

\end_inset

 The implementation of the is described as below:
\begin_inset Newline newline
\end_inset

 
\end_layout

\begin_layout Paragraph
Particle
\end_layout

\begin_layout Standard
The particle structure describes a sphere. It has a radius, initial x, y coordinates and initial vx, vy velocity values. Each particle also has a color. All these are randomly assigned.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Paragraph
List
\end_layout

\begin_layout Standard
Each particle also has a linked list attached to the particle. The linked list keeps track of all the valid collisions that the particular particle has participated in. This list is later purged to obtain the data for our plot.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Paragraph
Collision Heap
\end_layout

\begin_layout Standard
The Heap structure is what maintains the entire event data for the system. Using equations of motion we predict the next event and insert it into the heap. The heap is a min-heap, which means that the earliest event is at the top.
\begin_inset Newline newline
\end_inset

 The heap is implemented as a very large array, with data members being Particle A and B (the two particles that take part in collision). In case the collision is with a wall, one of them is null. 
\begin_inset Newline newline
\end_inset

 The main loop runs until the heap is empty and the prediction function is called until the logical time is greater than or equal to the intended time of simulation.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Paragraph
Validity Check
\end_layout

\begin_layout Standard
The validity of a collision event is checked as follows:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\series bold
isValid(CollisionHeap A)
\series default
 
\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 if (A.a != NULL and count(A.a) != A.countA)
\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 return false;
\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 if (A.b != NULL and count(A.b) != A.countB)
\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 return false;
\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 return true;
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Paragraph
Insertion
\end_layout

\begin_layout Standard
Pseudocode for insertion of events: 
\begin_inset Newline newline
\end_inset

 
\begin_inset Newline newline
\end_inset

 
\series bold
void Insert(CollisionHeap H[], CollisionHeap Element)
\series default

\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 i=0;
\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 heapsize++;
\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 H[heapsize]
\begin_inset Formula $\leftarrow$
\end_inset

Element;
\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 now
\begin_inset Formula $\leftarrow$
\end_inset

heapsize;
\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 while(H[now/2].timestamp 
\begin_inset Formula $\textgreater$
\end_inset

 Element.timestamp)
\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 H[now]
\begin_inset Formula $\leftarrow$
\end_inset

H[now/2];
\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 now/=2;
\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 H[now]
\begin_inset Formula $\leftarrow$
\end_inset

Element;
\begin_inset Newline newline
\end_inset

 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Paragraph
Minimum Element extraction and Deletion
\end_layout

\begin_layout Standard
Pseudocode for extracting the next event and deleting it from the Heap:
\begin_inset Newline newline
\end_inset

 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\series bold
CollisionHeap NextDelete(CollisionHeap H[])
\series default

\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 CollisionHeap minElement,lastElement;
\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 int child,now;
\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 minElement 
\begin_inset Formula $\leftarrow$
\end_inset

 H[1];
\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 lastElement 
\begin_inset Formula $\leftarrow$
\end_inset

 H[Heapsize--];
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 for(now = 1; now*2 
\begin_inset Formula $\textless$
\end_inset

= Heapsize ;now = child)
\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 child 
\begin_inset Formula $\leftarrow$
\end_inset

 now*2;
\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 if(child not equals Heapsize and H[child+1].timestamp 
\begin_inset Formula $\textless$
\end_inset

 H[child].timestamp ) 
\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 child++;
\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 if(lastElement.timestamp 
\begin_inset Formula $\textgreater$
\end_inset

 H[child].timestamp)
\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 H[now] 
\begin_inset Formula $\leftarrow$
\end_inset

 H[child];
\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 else
\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 break;
\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 H[now] 
\begin_inset Formula $\leftarrow$
\end_inset

 lastElement;
\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
indent
\end_layout

\end_inset

 return minElement;
\begin_inset Newline newline
\end_inset

 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Subsection
Complexity Analysis
\end_layout

\begin_layout Standard

\begin_inset CommandInset label
LatexCommand label
name "Complexity Analysis"

\end_inset

 
\end_layout

\begin_layout Paragraph
Insertion
\end_layout

\begin_layout Standard
Insertion requires adding an event to its specific linked list followed by updating the heap upwards from the linked list towards the root. This operation consumes 
\begin_inset Formula $\theta(log(n))$
\end_inset

 number of operations, where 
\begin_inset Formula $\mathbf{n}$
\end_inset

 is the number of particles in the system.
\end_layout

\begin_layout Paragraph
Extraction of minimum and deletion
\end_layout

\begin_layout Standard
The minimum element is at the top due to the heap property, so obtaining it takes 
\begin_inset Formula $\theta(1)$
\end_inset

 time.
\begin_inset Newline newline
\end_inset

 Now we take the max element and put it at the top, then recursively swap it with its children until the heap property is restored.
\begin_inset Newline newline
\end_inset

 In the worst case, the new root has to be swapped with its child on each level until it reaches the bottom level of the heap, meaning that the delete operation has a time complexity relative to the height of the tree, or 
\begin_inset Formula $\theta(log(n))$
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Plots
\end_layout

\begin_layout Standard

\begin_inset CommandInset label
LatexCommand label
name "plots"

\end_inset


\end_layout

\begin_layout Standard

\begin_inset Float figure
placement ht!
wide false
sideways false
status open


\begin_layout Standard

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
centering
\end_layout

\end_inset

 
\begin_inset Graphics 
	filename plot1.jpg
	width 12cm

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\begin_inset Float figure
placement ht!
wide false
sideways false
status open


\begin_layout Standard

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
centering
\end_layout

\end_inset

 
\begin_inset Graphics 
	filename plot2.jpg
	width 12cm

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\begin_inset Float figure
placement ht!
wide false
sideways false
status open


\begin_layout Standard

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
centering
\end_layout

\end_inset

 
\begin_inset Graphics 
	filename plot3.jpg
	width 12cm

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\begin_inset Float figure
placement ht!
wide false
sideways false
status open


\begin_layout Standard

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
centering
\end_layout

\end_inset

 
\begin_inset Graphics 
	filename plot4.jpg
	width 12cm

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\begin_inset Float figure
placement ht!
wide false
sideways false
status open


\begin_layout Standard

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
centering
\end_layout

\end_inset

 
\begin_inset Graphics 
	filename plot5.jpg
	width 12cm

\end_inset

 
\end_layout

\end_inset


\end_layout

\end_body
\end_document
