#LyX file created by tex2lyx 2.1
\lyxformat 474
\begin_document
\begin_header
\textclass article
\begin_preamble


\title{Assignment 6}
\author{Avijit Ghosh }
\date{February 2016}


\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package none
\inputencoding utf8
\fontencoding default
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 0
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
maketitle
\end_layout

\end_inset


\end_layout

\begin_layout Section
INTERVAL TREES
\end_layout

\begin_layout Standard
Interval Trees have been made using a Binary Tree structure where each structure has two nodes (left and right child) and a data point, which is a sorted link list. The tree is always balanced and sorted (BST).
\end_layout

\begin_layout Section
CREATE INTERVAL TREE
\end_layout

\begin_layout Standard
1. The l and u values are passed to the function, along with n-the no. of intervals.
\end_layout

\begin_layout Standard
2. I find the subrange length ass size/n
\end_layout

\begin_layout Standard
3. I begin from the first index (l) and keep incrementing by the subrange size to get my ranges. The remainder goes to the last range.
\end_layout

\begin_layout Standard
4. Now, these ranges are passed to another function called allot.
\end_layout

\begin_layout Standard
5. The ranges are already sorted, so no sorting is applied.
\end_layout

\begin_layout Standard
6. We find the media by taking the middle element of the lower range index. In case of even number, the higher one is taken.
\end_layout

\begin_layout Standard
7. The median range is chosen and created as a root. All the lower ranges go to the left child and all the higher ones go to the right child and the process is applied recursively.
\end_layout

\begin_layout Standard
8. By this method, each element in the n ranges is accessed once. There is no explicit sorting involved and thus the complexity is O(N)
\end_layout

\begin_layout Section
MERGE
\end_layout

\begin_layout Standard
1. The node is picked recursively until the given l and u lie entirely inside itself or its left and right children.
\end_layout

\begin_layout Standard
2. An inorder traversal of the tree is done from that point onwards to collect all the values in a linked list.
\end_layout

\begin_layout Standard
3. The range values are collected in another array. The given [l, u] values generated randomly are inserted. Now the array is sorted. ( O(N) as I use a list and insert in-place)
\end_layout

\begin_layout Standard
4. A loop is now run over the range values to merge the ranges. If the incoming range has a lower start value than the already existing end value, the maximum of the two end values are taken (merge). Otherwise a new range is created and appended to the list.
\end_layout

\begin_layout Standard
5. Finally, the new ranges are used by the allot function (as written above) to allot nodes based on the median strategy to balance, and then insert is repeatedly called with the values in our linkedlist to populate that tree.
\end_layout

\begin_layout Standard
6. Finally, this new tree is attached to the same place where its root used to be.
\end_layout

\begin_layout Standard
7. The elements are accessed in O(n) time and the height of the tree is log(n), so the complexity is O(n log n).
\end_layout

\end_body
\end_document
