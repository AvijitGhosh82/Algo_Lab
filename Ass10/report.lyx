#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{babel}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding iso8859-15
\fontencoding T1
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 0
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Assignment 10
\end_layout

\begin_layout Author
Avijit Ghosh
\end_layout

\begin_layout Author
14CH3FP18
\end_layout

\begin_layout Date
25.03.2016
\end_layout

\begin_layout Standard
 
\end_layout

\begin_layout Abstract
Finding arbitrage opportunities in currency conversion using the Bellman-Ford
 Algorithm 
\end_layout

\begin_layout Part
Introduction
\end_layout

\begin_layout Standard
Arbitrage is the use of discrepancies in currency exchange rates to transform
 one unit of a currency into more than one unit of the same currency.
 Suppose, 1 U.S.
 dollar bought 0.82 Euro, Euro bought 129.7 Japanese Yen,1 Japanese Yen bought
 12 Turkish Lira, and one Turkish Lira bought 0.0008 U.S.
 dollars.
 Then, by converting currencies, a trader can start with U.S.
 dollar and buy 1.02 U.S.
 dollars, thus turning a $0.02 profit.
 Suppose that we are given n currencies nxn table of exchange rates, we
 should find if such a cyclic arbitrage opportunity exists.
\end_layout

\begin_layout Part
Bellman Ford Algorithm
\end_layout

\begin_layout Standard
function BellmanFord(list vertices, list edges, vertex source)
\end_layout

\begin_layout Standard
init distance[],predecessor[]
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
indent
\end_layout

\end_inset

 // This implementation takes in a graph, represented as // lists of vertices
 and edges, and fills two arrays (distance and predecessor) with shortest-path
 (less cost/distance/metric) information
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
indent
\end_layout

\end_inset

 // Step 1: initialize graph for each vertex v in vertices:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
indent
\end_layout

\end_inset

 distance[v]= inf
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
indent
\end_layout

\end_inset

 // At the beginning , all vertices have a weight of infinity
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
indent
\end_layout

\end_inset

 predecessor[v]= null
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
indent
\end_layout

\end_inset

 // And a null predecessor
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
indent
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
indent
\end_layout

\end_inset

 distance[source] = 0
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
indent
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
indent
\end_layout

\end_inset

 // Except for the Source, where the Weight is zero
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
indent
\end_layout

\end_inset

//Step 2: relax edges repeatedly for i from 1 to size(vertices)-1:
\end_layout

\begin_layout Standard
for each edge (u, v) with weight w in edges:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
indent
\end_layout

\end_inset

 if distance[u] + w < distance[v]:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
indent
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
indent
\end_layout

\end_inset

 distance[v] = distance[u] + w
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
indent
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
indent
\end_layout

\end_inset

 predecessor[v] = u
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
indent
\end_layout

\end_inset

 // Step 3: check for negative-weight cycles
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
indent
\end_layout

\end_inset

 for each edge (u, v) with weight w in edges:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
indent
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
indent
\end_layout

\end_inset

 if distance[u] + w < distance[v]:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
indent
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
indent
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
indent
\end_layout

\end_inset

 error "Graph contains a negative-weight cycle"
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
indent
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
indent
\end_layout

\end_inset

 return distance[], predecessor[]
\end_layout

\begin_layout Part
Using this in our Arbitrage Problem
\end_layout

\begin_layout Standard
A solution to the problem is achieved when the product of subsequents weights
 is >1.
 This can be converted to a BellMan ford problem by converting the edged
 weights to negative logs and then finding negative cycles in the graph.
\end_layout

\begin_layout Part
Complexity Analysis
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Time complexity: We first modify each weight 
\begin_inset Formula $w$
\end_inset

 by 
\begin_inset Formula $-log(w)$
\end_inset

 in time 
\begin_inset Formula $O(|E|)$
\end_inset

.
 We then use Bellman Ford to find cycles in time 
\begin_inset Formula $O(|V||E|)$
\end_inset

.
 Therefore our asymptotic time complexity is 
\begin_inset Formula $O(|V||E|)$
\end_inset

.
 Printing takes time 
\begin_inset Formula $O(V)$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Proof of correctness: Assume for proof by contradiction we have a risk-free
 currency exchange opportunity in the graph but it is not a cycle.
 We note that Bellman Ford, by iterating through all edges in finding shortest
 paths, will detect all graphs in a cycle.
 Our exchange opportunity must be present in the graph so we can follow
 a currency's edges to find this opportunity.
 If we follow paths leading from a source currency (which we know is included
 in the path of an opportunity) we must either: 
\end_layout

\begin_layout Itemize
i) either eventually find a path back to this currency
\end_layout

\begin_layout Itemize
ii) never return to this currency
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
In case ii) we never return to our currency.
 This means we have not found a risk-free opportunity because this implies
 we return to a currency with positive value.
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
In case i) we consider first the subcase where we return with a positive
 path (or value 0).
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
In this subcase we have lost money returning to our currency (or made no
 money in case the path has sum of weights 0).
 This means it is not a risk-free opportunity because there is no gain in
 exercising it.
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
In the case i) subccase where we have a negative path: This means we have
 found a path returning to our original currency that makes the user money.
 Clearly (given an unchanging graph), we can exercise this path multiple
 times.
 This means it is a negative cycle and will be reported by Bellman Ford.
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
As we have shown how all cases except the last subcase are contradictory,
 we have proven that returning negative cycles found by Bellman Ford will
 return and only return risk-free currency exchanges.
\end_layout

\end_body
\end_document
