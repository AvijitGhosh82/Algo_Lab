#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass \use_default_options
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard

\series bold
\size large
The Skyline Problem:
\end_layout

\begin_layout Standard

\series bold
1.
 Rectangular Buildings
\end_layout

\begin_layout Standard
a.
 The series of buildings is generated randomly (format: left, height, right)
\end_layout

\begin_layout Standard
b.
 They are arranged using Quicksort ( nlogn)
\end_layout

\begin_layout Standard
c.
 A structure called Skyline is used here which is basically a linked list
 with two data points (left, height), in each node.
\end_layout

\begin_layout Standard
d.
 Now the sorted building array is divided into left and right parts until
 the size is 1 (divide)
\end_layout

\begin_layout Standard
e.
 The base case is when there is only one building, in this case the skyline
 data structure to be returned will have only two nodes: (left, height)-->(right
, 0)
\end_layout

\begin_layout Standard
f.
 The left and right lists(skylines) are now merged recursively on the basis
 of their x coordinates (left) in increasing order .(conquer).
\end_layout

\begin_layout Standard
g.
 In this merge function two things are kept in mind: If the incoming node
 has the same x coordinate as the previous, but has a different height,
 the bigger height is taken.
 And if the incoing node has same height but a different x coordinate, it
 is dropped, as it is redundant (building overlapped by another).
 
\end_layout

\begin_layout Standard
h.
 Thus the above algorithm is a simple merge sort type algorithm which has
 O(nlogn) complexity.
\end_layout

\begin_layout Standard

\series bold
2.
 Slant Buildings
\end_layout

\begin_layout Standard
This problem is largely similar to the previous one.
\end_layout

\begin_layout Standard
a.
 Buildings are represented by (left, left height, right, right height) format.
\end_layout

\begin_layout Standard
b.
 They are arranged using Quicksort ( nlogn)
\end_layout

\begin_layout Standard
c.
 A structure called Skyline is used here which is basically a linked list
 with two data points (left, height), in each node.
\end_layout

\begin_layout Standard
d.
 Now the sorted building array is divided into left and right parts until
 the size is 
\series bold
\size large
2
\series default
\size default
 (divide).
 
\end_layout

\begin_layout Standard
e.
 This is because for two overlapping buildings, there will now be a third
 point to be taken into consideration, which is basically the point of interesti
on of the two roof lines of the two buildings.
\end_layout

\begin_layout Standard
f.
 5 points are returned in base case.
 (2 for left, 2 for right and 1 intersection if valid).
\end_layout

\begin_layout Standard
g.
 The left and right lists(skylines) are now merged recursively on the basis
 of their x coordinates (left) in increasing order .(conquer).
\end_layout

\begin_layout Standard
h.
 In this merge function two things are kept in mind: If the incoming node
 has the same x coordinate as the previous, but has a different height,
 the bigger height is taken.
 And if the incoing node has same height but a different x coordinate, it
 is dropped, as it is redundant (building overlapped by another).
 
\end_layout

\begin_layout Standard
i.
 Thus the above algorithm is a simple merge sort type algorithm which has
 O(nlogn) complexity.
\end_layout

\end_body
\end_document
